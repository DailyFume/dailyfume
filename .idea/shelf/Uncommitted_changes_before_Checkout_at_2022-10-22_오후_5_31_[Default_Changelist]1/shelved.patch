Index: app/src/main/java/com/example/daily_fume/PickListActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>//package com.example.daily_fume;\r\n//\r\n//import androidx.appcompat.app.AlertDialog;\r\n//import androidx.appcompat.app.AppCompatActivity;\r\n//import androidx.appcompat.widget.Toolbar;\r\n//\r\n//import android.app.ProgressDialog;\r\n//import android.content.Context;\r\n//import android.content.DialogInterface;\r\n//import android.content.Intent;\r\n//import android.graphics.Color;\r\n//import android.os.AsyncTask;\r\n//import android.os.Bundle;\r\n//import android.provider.ContactsContract;\r\n//import android.text.InputFilter;\r\n//import android.util.Log;\r\n//import android.view.LayoutInflater;\r\n//import android.view.View;\r\n//import android.view.ViewGroup;\r\n//import android.widget.AdapterView;\r\n//import android.widget.ArrayAdapter;\r\n//import android.widget.BaseAdapter;\r\n//import android.widget.Button;\r\n//import android.widget.EditText;\r\n//import android.widget.ImageView;\r\n//import android.widget.ListAdapter;\r\n//import android.widget.ListView;\r\n//import android.widget.Spinner;\r\n//import android.widget.TextView;\r\n//import android.widget.Toast;\r\n//\r\n//import com.android.volley.RequestQueue;\r\n//import com.android.volley.toolbox.Volley;\r\n//import com.android.volley.Response;\r\n//\r\n//import org.json.JSONArray;\r\n//import org.json.JSONException;\r\n//import org.json.JSONObject;\r\n//\r\n//import java.io.BufferedReader;\r\n//import java.io.InputStream;\r\n//import java.io.InputStreamReader;\r\n//import java.io.OutputStream;\r\n//import java.net.HttpURLConnection;\r\n//import java.net.URL;\r\n//import java.util.ArrayList;\r\n//import java.util.List;\r\n//\r\n//public class PickListActivity extends AppCompatActivity {\r\n//    ImageView backBtn, pickBoxNew;\r\n//    TextView title_change, mTextListname;\r\n//\r\n//    ImageView homeIcon, testIcon, searchIcon, loveIcon, mypageIcon;\r\n//\r\n//    Spinner spinnerPick;\r\n//    String[] PfItems = { \"  기본  \", \"  최신순  \", \"  이름순  \"};\r\n//    ListView pickBoxList;\r\n//    ArrayList<String> TitleValues = new ArrayList<String>();\r\n//    ArrayList<Integer> PickNumValue = new ArrayList<Integer>();\r\n//    ArrayList<LikelistData> likelistData;\r\n//\r\n//    String listname;\r\n//    String serverURL = \"http://43.201.60.239/likelist.php\";\r\n//    Button BoxModifyBtn, BoxDeleteBtn;\r\n//\r\n//    private static String IP_ADDRESS = \"43.201.60.239\";\r\n//    private static String TAG = \"likelistphp\";\r\n//\r\n//    private ListAdapter likelistAdapter;\r\n//    private String mJsonString;\r\n//\r\n//    @Override\r\n//    protected void onCreate(Bundle savedInstanceState) {\r\n//        super.onCreate(savedInstanceState);\r\n//        setContentView(R.layout.activity_pick_list);\r\n//\r\n//        Toolbar toolbar = (Toolbar) findViewById(R.id.topBar);\r\n//        setSupportActionBar(toolbar);\r\n//\r\n//        title_change = (TextView) findViewById(R.id.title_change);\r\n//        title_change.setText(\"찜한 상품\");\r\n//\r\n//        mTextListname = (TextView)findViewById(R.id.boxTitle);\r\n//        pickBoxList = (ListView)findViewById(R.id.pickBoxList);\r\n//        TitleValues = new ArrayList<>();\r\n//\r\n//        backBtn = (ImageView) findViewById(R.id.back_icon);\r\n//        backBtn.setOnClickListener(new View.OnClickListener() {\r\n//            @Override\r\n//            public void onClick(View v) {\r\n//                onBackPressed();\r\n//            }\r\n//        });\r\n//\r\n//        homeIcon = (ImageView) findViewById(R.id.homeIcon);\r\n//        testIcon = (ImageView) findViewById(R.id.testIcon);\r\n//        // searchIcon = (ImageView) findViewById(R.id.searchIcon);\r\n//        // loveIcon = (ImageView) findViewById(R.id.loveIcon);\r\n//        mypageIcon = (ImageView) findViewById(R.id.mypageIcon);\r\n//\r\n//        homeIcon.setOnClickListener(new View.OnClickListener() {\r\n//            @Override\r\n//            public void onClick(View v) {\r\n//                Intent intent = new Intent(getApplicationContext(), HomeActivity.class);\r\n//                startActivity(intent);\r\n//                finish();\r\n//            }\r\n//        });\r\n//\r\n//        testIcon.setOnClickListener(new View.OnClickListener() {\r\n//            @Override\r\n//            public void onClick(View v) {\r\n//                Intent intent = new Intent(getApplicationContext(), TestMainActivity.class);\r\n//                startActivity(intent);\r\n//                finish();\r\n//            }\r\n//        });\r\n//\r\n//        // searchIcon.setOnClickListener();\r\n//        // loveIcon.setOnClickListener();\r\n//\r\n//        mypageIcon.setOnClickListener(new View.OnClickListener() {\r\n//            @Override\r\n//            public void onClick(View v) {\r\n//                Intent intent = new Intent(getApplicationContext(), MyPageActivity.class);\r\n//                startActivity(intent);\r\n//                finish();\r\n//            }\r\n//        });\r\n//\r\n//\r\n//        // 스피너 - 폴더정렬\r\n//        spinnerPick = (Spinner) findViewById(R.id.spinnerPick);\r\n//\r\n//        ArrayAdapter<String> adapter = new ArrayAdapter<String>(\r\n//                this, android.R.layout.simple_spinner_item, PfItems);\r\n//        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n//        spinnerPick.setAdapter(adapter);\r\n//\r\n//\r\n//\r\n//        spinnerPick.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n//            @Override\r\n//            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n//                //PfItemsBox.setText(PfItems[position]);\r\n//                ((TextView)parent.getChildAt(0)).setTextColor(Color.rgb(199, 131, 142));\r\n//                ((TextView)parent.getChildAt(0)).setTextAlignment(View.TEXT_ALIGNMENT_CENTER);\r\n//                switch(position) {\r\n//                    case 0 :\r\n//                        // ★ 임시 (기본)\r\n//                        break;\r\n//                    case 1 :\r\n//                        // ★ 임시 (최신순)\r\n//                        break;\r\n//                    case 2 :\r\n//                        // ★ 임시 (이름순)\r\n//                        break;\r\n//                }\r\n//            }\r\n//\r\n//            @Override\r\n//            public void onNothingSelected(AdapterView<?> parent) {\r\n//\r\n//            }\r\n//        });\r\n//\r\n//        // 찜폴더 관리\r\n//        TitleValues.add(\"기본 그룹\");\r\n//\r\n//        for (int i = 0; i < TitleValues.size(); i++) {\r\n//            pickBoxLoading();\r\n//        }\r\n//\r\n//\r\n//        // ★ 리스트뷰와 버튼 조합일 시 주의사항\r\n//        // 1. 리스트뷰 포커스를 false로 해야 함\r\n//        // 2. 리스트뷰에 들어간 레이아웃에서 버튼들 xml에 clickable과 focusable은 false로 해야 함\r\n//        // 3. getView 메서드로 클릭하게 해줘야 됨.\r\n//\r\n///*\r\n//        // 어댑터 파일로 이동됨\r\n//        pickBoxList.setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n//            @Override  // ★ 각각의 폴더 선택하면 해당 찜한 상품이 저장된 폴더로 이동 나중에 수정하기\r\n//            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n//\r\n//                switch (TitleValues.get(position)){\r\n//                    case \"기본 그룹\" :\r\n//                        Intent intent = new Intent(getApplicationContext(), PickFumeActivity.class);\r\n//                        startActivity(intent); // 임시 (찜한 향수들 목록이 있는 페이지로 이동)\r\n//                        break;\r\n//                }\r\n//            }\r\n//        }); */\r\n//\r\n//        // 새폴더 추가\r\n//        likelistAdapter = new LikelistAdapter(this, likelistData);\r\n//\r\n//        pickBoxNew = (ImageView) findViewById(R.id.pickBoxNew);\r\n//        pickBoxNew.setOnClickListener(new View.OnClickListener() {\r\n//            @Override\r\n//            public void onClick(View v) {\r\n//                AlertDialog.Builder alert = new AlertDialog.Builder(PickListActivity.this);\r\n//                alert.setTitle(\"그룹명을 입력하세요\");\r\n//                alert.setMessage(\"최대 8자까지 가능합니다.\");\r\n//                final EditText boxName = new EditText(PickListActivity.this);\r\n//                InputFilter[] FilterArray = new InputFilter[1];\r\n//                FilterArray[0] = new InputFilter.LengthFilter(8); //글자수 제한\r\n//                boxName.setFilters(FilterArray);\r\n//                alert.setView(boxName);\r\n//\r\n//                alert.setPositiveButton(\"확인\", new DialogInterface.OnClickListener() {\r\n//                    public void onClick(DialogInterface dialog, int whichButton) {\r\n//                        // ★ 확인 버튼 클릭시 액션\r\n//                        listname = boxName.getText().toString();\r\n//\r\n//                        Intent intent = getIntent();\r\n//                        int uid = intent.getExtras().getInt(\"uid\");\r\n//\r\n//                        TaskParams params = new TaskParams(serverURL, listname, uid);\r\n//                        InsertData insertData = new InsertData();\r\n//                        insertData.execute(params);\r\n//\r\n//                        //폴더 추가 후 인텐트 갱신하여 목록 가져오기\r\n////                        GetTaskParams params1 = new GetTaskParams(serverURL, uid);\r\n////                        GetData task = new GetData();\r\n////                        task.execute(params1);\r\n//                    }\r\n//                });\r\n//\r\n//                alert.setNegativeButton(\"취소\", new DialogInterface.OnClickListener() {\r\n//                    public void onClick(DialogInterface dialog, int whichButton) {\r\n//                        // ★ 취소 버튼 클릭시 액션\r\n//                        dialog.cancel();\r\n//                    }\r\n//                });\r\n//                alert.show();\r\n//                //showPickBoxNew();\r\n//            }\r\n//        });\r\n//\r\n//    }\r\n//\r\n//\r\n//    // 메서드\r\n//\r\n//    void pickBoxLoading() { // 폴더 추가 메서드 - ★ 단 새로고침하면 기존 폴더들이 사라짐 (개선하기)\r\n//        ButtonListAdapter pickboxadapter = new ButtonListAdapter( this, TitleValues);\r\n//        pickBoxList.setAdapter(pickboxadapter);\r\n//\r\n//    }\r\n//\r\n//    void pickBoxClick() {\r\n//        pickBoxList.setOnItemClickListener(new AdapterView.OnItemClickListener() {\r\n//            @Override  // ★ 각각의 폴더 선택하면 해당 찜한 상품이 저장된 폴더로 이동 나중에 수정하기\r\n//            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {\r\n//                //Intent intent = new Intent(getApplicationContext(), PickFumeActivity.class);\r\n//                // intent.putExtra(\"it_listData\", TitleValues.get(position));\r\n//                // startActivity(intent); // 임시\r\n//                //Toast.makeText(getApplicationContext(), \" 그룹 클릭\", Toast.LENGTH_SHORT).show();\r\n//            }\r\n//        });\r\n//    }\r\n//\r\n//\r\n////    void showPickBoxNew() { // 새로 박스 만들기\r\n////        AlertDialog.Builder alert = new AlertDialog.Builder(this);\r\n////        alert.setTitle(\"그룹명을 입력하세요\");\r\n////        alert.setMessage(\"최대 8자까지 가능합니다.\");\r\n////        final EditText boxName = new EditText(this);\r\n////        InputFilter[] FilterArray = new InputFilter[1];\r\n////        FilterArray[0] = new InputFilter.LengthFilter(8); //글자수 제한\r\n////        boxName.setFilters(FilterArray);\r\n////        alert.setView(boxName);\r\n////\r\n////        alert.setPositiveButton(\"확인\", new DialogInterface.OnClickListener() {\r\n////            public void onClick(DialogInterface dialog, int whichButton) {\r\n////                // ★ 확인 버튼 클릭시 액션\r\n////                listname = boxName.getText().toString();\r\n////\r\n////                Intent intent = getIntent();\r\n////                int uid = intent.getExtras().getInt(\"uid\");\r\n////\r\n////                TaskParams params = new TaskParams(serverURL, listname, uid);\r\n////                InsertData insertData = new InsertData();\r\n////                insertData.execute(params);\r\n////\r\n////                //폴더 추가 후 인텐트 갱신하여 목록 가져오기\r\n////                GetTaskParams params1 = new GetTaskParams(serverURL, uid);\r\n////                GetData task = new GetData();\r\n////                task.execute(params1);\r\n////            }\r\n////        });\r\n////\r\n////        alert.setNegativeButton(\"취소\", new DialogInterface.OnClickListener() {\r\n////            public void onClick(DialogInterface dialog, int whichButton) {\r\n////                // ★ 취소 버튼 클릭시 액션\r\n////                dialog.cancel();\r\n////            }\r\n////        });\r\n////        alert.show();\r\n////\r\n////    }\r\n//\r\n//    private static class TaskParams {\r\n//        int uid;\r\n//        String listname;\r\n//        String serverURL;\r\n//\r\n//        TaskParams(String serverURL, String listname, int uid) {\r\n//            this.serverURL = serverURL;\r\n//            this.listname = listname;\r\n//            this.uid = uid;\r\n//        }\r\n//    }\r\n//\r\n//    class InsertData extends AsyncTask<TaskParams, Void, String> {\r\n//        ProgressDialog progressDialog;\r\n//\r\n//        @Override\r\n//        protected void onPreExecute() {\r\n//            super.onPreExecute();\r\n//            progressDialog = ProgressDialog.show(PickListActivity.this,\r\n//                    \"Please Wait\", null, true, true);\r\n//        }\r\n//\r\n//        @Override\r\n//        protected void onPostExecute(String result) {\r\n//            super.onPostExecute(result);\r\n//            progressDialog.dismiss();\r\n//            Log.d(TAG, \"POST response  - \" + result);\r\n//\r\n//            TitleValues.add(listname);\r\n//            pickBoxLoading();\r\n//            Toast.makeText(getApplicationContext(), listname + \"폴더가 추가되었습니다.\", Toast.LENGTH_SHORT).show();\r\n//        }\r\n//\r\n//        @Override\r\n//        protected String doInBackground(TaskParams... params) {\r\n//\r\n//            String serverURL = params[0].serverURL;\r\n//            String listname = params[0].listname;\r\n//            int uid = params[0].uid;\r\n//\r\n//            String postParameters = \"listname=\" + listname + \"&user_uid=\" + uid;\r\n//\r\n//            try {\r\n//                URL url = new URL(serverURL);\r\n//                HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();\r\n//\r\n//                httpURLConnection.setReadTimeout(5000);\r\n//                httpURLConnection.setConnectTimeout(5000);\r\n//                httpURLConnection.setRequestMethod(\"POST\");\r\n//                httpURLConnection.connect();\r\n//\r\n//                OutputStream outputStream = httpURLConnection.getOutputStream();\r\n//                outputStream.write(postParameters.getBytes(\"UTF-8\"));\r\n//                outputStream.flush();\r\n//                outputStream.close();\r\n//\r\n//                int responseStatusCode = httpURLConnection.getResponseCode();\r\n//                Log.d(TAG, \"POST response code - \" + responseStatusCode);\r\n//\r\n//                InputStream inputStream;\r\n//                if(responseStatusCode == HttpURLConnection.HTTP_OK) {\r\n//                    inputStream = httpURLConnection.getInputStream();\r\n//                }\r\n//                else{\r\n//                    inputStream = httpURLConnection.getErrorStream();\r\n//                }\r\n//\r\n//                InputStreamReader inputStreamReader = new InputStreamReader(inputStream, \"UTF-8\");\r\n//                BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\r\n//\r\n//                StringBuilder sb = new StringBuilder();\r\n//                String line = null;\r\n//\r\n//                while((line = bufferedReader.readLine()) != null){\r\n//                    sb.append(line);\r\n//                }\r\n//                bufferedReader.close();\r\n//                return sb.toString();\r\n//            } catch (Exception e) {\r\n//                Log.d(TAG, \"InsertData: Error \", e);\r\n//                return new String(\"Error: \" + e.getMessage());\r\n//            }\r\n//\r\n//        }\r\n//    }\r\n//\r\n////    private static class GetTaskParams {\r\n////        int uid;\r\n////        String serverURL;\r\n////\r\n////        GetTaskParams(String serverURL, int uid) {\r\n////            this.serverURL = serverURL;\r\n////            this.uid = uid;\r\n////        }\r\n////    }\r\n////\r\n////    private class GetData extends AsyncTask<GetTaskParams, Void, String>{\r\n////\r\n////        ProgressDialog progressDialog;\r\n////        String errorString = null;\r\n////\r\n////        @Override\r\n////        protected void onPreExecute() {\r\n////            super.onPreExecute();\r\n////\r\n////            progressDialog = ProgressDialog.show(PickListActivity.this,\r\n////                    \"Please Wait\", null, true, true);\r\n////        }\r\n////\r\n////        @Override\r\n////        protected void onPostExecute(String result) {\r\n////            super.onPostExecute(result);\r\n////            progressDialog.dismiss();\r\n////            Log.d(TAG, \"response - \" + result);\r\n////            if (result == null){\r\n////                Log.d(TAG, errorString);\r\n////            }\r\n////            else {\r\n////                Intent intent = getIntent();\r\n////                finish();\r\n////                startActivity(intent);\r\n////                mJsonString = result;\r\n////                showResult();\r\n////            }\r\n////        }\r\n////\r\n////\r\n////        @Override\r\n////        protected String doInBackground(GetTaskParams... params) {\r\n////            String serverURL = params[0].serverURL;\r\n////            int uid = params[0].uid;\r\n////\r\n////            String postParameters = \"user_uid=\" + uid;\r\n////\r\n////            try {\r\n////                URL url = new URL(serverURL);\r\n////                HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();\r\n////\r\n////                httpURLConnection.setReadTimeout(5000);\r\n////                httpURLConnection.setConnectTimeout(5000);\r\n////                httpURLConnection.setRequestMethod(\"POST\");\r\n////                httpURLConnection.setDoInput(true);\r\n////                httpURLConnection.connect();\r\n////\r\n////                OutputStream outputStream = httpURLConnection.getOutputStream();\r\n////                outputStream.write(postParameters.getBytes(\"UTF-8\"));\r\n////                outputStream.flush();\r\n////                outputStream.close();\r\n////\r\n////                int responseStatusCode = httpURLConnection.getResponseCode();\r\n////                Log.d(TAG, \"response code - \" + responseStatusCode);\r\n////\r\n////                InputStream inputStream;\r\n////                if(responseStatusCode == HttpURLConnection.HTTP_OK) {\r\n////                    inputStream = httpURLConnection.getInputStream();\r\n////                }\r\n////                else{\r\n////                    inputStream = httpURLConnection.getErrorStream();\r\n////                }\r\n////\r\n////                InputStreamReader inputStreamReader = new InputStreamReader(inputStream, \"UTF-8\");\r\n////                BufferedReader bufferedReader = new BufferedReader(inputStreamReader);\r\n////\r\n////                StringBuilder sb = new StringBuilder();\r\n////                String line;\r\n////\r\n////                while((line = bufferedReader.readLine()) != null){\r\n////                    sb.append(line);\r\n////                }\r\n////                bufferedReader.close();\r\n////                return sb.toString().trim();\r\n////\r\n////            } catch (Exception e) {\r\n////\r\n////                Log.d(TAG, \"InsertData: Error \", e);\r\n////                errorString = e.toString();\r\n////\r\n////                return null;\r\n////            }\r\n////        }\r\n////    }\r\n////\r\n////    private void showResult(){\r\n////        String TAG_JSON=\"dailyfume\";\r\n////        String TAG_UID = \"user_uid\";\r\n////\r\n////        try {\r\n////            JSONObject jsonObject = new JSONObject(mJsonString);\r\n////            JSONArray jsonArray = jsonObject.getJSONArray(TAG_JSON);\r\n////\r\n////            for(int i=0;i<jsonArray.length();i++){\r\n////                JSONObject item = jsonArray.getJSONObject(i);\r\n////\r\n////                int uid = item.getInt(TAG_UID);\r\n////\r\n////                LikelistData listData = new LikelistData();\r\n////\r\n////                listData.setUid(uid);\r\n////\r\n////                likelistData.add(listData);\r\n////                pickBoxList.setAdapter(likelistAdapter);\r\n////            }\r\n////\r\n////        } catch (JSONException e) {\r\n////            Log.d(TAG, \"showResult : \", e);\r\n////        }\r\n////\r\n////    }\r\n//\r\n//\r\n//\r\n//}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/example/daily_fume/PickListActivity.java b/app/src/main/java/com/example/daily_fume/PickListActivity.java
--- a/app/src/main/java/com/example/daily_fume/PickListActivity.java	(revision 53603c264f0414e263d0c16faf3bde20d5d260ae)
+++ b/app/src/main/java/com/example/daily_fume/PickListActivity.java	(date 1666427482620)
@@ -1,515 +1,341 @@
-//package com.example.daily_fume;
-//
-//import androidx.appcompat.app.AlertDialog;
-//import androidx.appcompat.app.AppCompatActivity;
-//import androidx.appcompat.widget.Toolbar;
-//
-//import android.app.ProgressDialog;
-//import android.content.Context;
-//import android.content.DialogInterface;
-//import android.content.Intent;
-//import android.graphics.Color;
-//import android.os.AsyncTask;
-//import android.os.Bundle;
-//import android.provider.ContactsContract;
-//import android.text.InputFilter;
-//import android.util.Log;
-//import android.view.LayoutInflater;
-//import android.view.View;
-//import android.view.ViewGroup;
-//import android.widget.AdapterView;
-//import android.widget.ArrayAdapter;
-//import android.widget.BaseAdapter;
-//import android.widget.Button;
-//import android.widget.EditText;
-//import android.widget.ImageView;
-//import android.widget.ListAdapter;
-//import android.widget.ListView;
-//import android.widget.Spinner;
-//import android.widget.TextView;
-//import android.widget.Toast;
-//
-//import com.android.volley.RequestQueue;
-//import com.android.volley.toolbox.Volley;
-//import com.android.volley.Response;
-//
-//import org.json.JSONArray;
-//import org.json.JSONException;
-//import org.json.JSONObject;
-//
-//import java.io.BufferedReader;
-//import java.io.InputStream;
-//import java.io.InputStreamReader;
-//import java.io.OutputStream;
-//import java.net.HttpURLConnection;
-//import java.net.URL;
-//import java.util.ArrayList;
-//import java.util.List;
-//
-//public class PickListActivity extends AppCompatActivity {
-//    ImageView backBtn, pickBoxNew;
-//    TextView title_change, mTextListname;
-//
-//    ImageView homeIcon, testIcon, searchIcon, loveIcon, mypageIcon;
-//
-//    Spinner spinnerPick;
-//    String[] PfItems = { "  기본  ", "  최신순  ", "  이름순  "};
-//    ListView pickBoxList;
-//    ArrayList<String> TitleValues = new ArrayList<String>();
-//    ArrayList<Integer> PickNumValue = new ArrayList<Integer>();
-//    ArrayList<LikelistData> likelistData;
-//
-//    String listname;
-//    String serverURL = "http://43.201.60.239/likelist.php";
-//    Button BoxModifyBtn, BoxDeleteBtn;
-//
+package com.example.daily_fume;
+
+import androidx.appcompat.app.AlertDialog;
+import androidx.appcompat.app.AppCompatActivity;
+import androidx.appcompat.widget.Toolbar;
+
+import android.app.ProgressDialog;
+import android.content.Context;
+import android.content.DialogInterface;
+import android.content.Intent;
+import android.graphics.Color;
+import android.os.AsyncTask;
+import android.os.Bundle;
+import android.provider.ContactsContract;
+import android.text.InputFilter;
+import android.util.Log;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.AdapterView;
+import android.widget.ArrayAdapter;
+import android.widget.BaseAdapter;
+import android.widget.Button;
+import android.widget.EditText;
+import android.widget.ImageView;
+import android.widget.ListView;
+import android.widget.Spinner;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import com.android.volley.RequestQueue;
+import com.android.volley.toolbox.Volley;
+import com.android.volley.Response;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.BufferedReader;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.OutputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
+
+public class PickListActivity extends AppCompatActivity {
+
+    ImageView backBtn, pickBoxNew;
+    TextView title_change;
+
+    ImageView homeIcon, testIcon, searchIcon, loveIcon, mypageIcon;
+
+    Spinner spinnerPick;
+    String[] PfItems = { "  기본  ", "  최신순  ", "  이름순  "};
+    ListView pickBoxList;
+    ArrayList<String> TitleValues = new ArrayList<String>();
+    ArrayList<Integer> PickNumValue = new ArrayList<Integer>();
+
+    String listname;
+    String serverURL = "http://43.201.60.239/likelist.php";
+    Button BoxModifyBtn, BoxDeleteBtn;
+
 //    private static String IP_ADDRESS = "43.201.60.239";
-//    private static String TAG = "likelistphp";
-//
-//    private ListAdapter likelistAdapter;
-//    private String mJsonString;
-//
-//    @Override
-//    protected void onCreate(Bundle savedInstanceState) {
-//        super.onCreate(savedInstanceState);
-//        setContentView(R.layout.activity_pick_list);
-//
-//        Toolbar toolbar = (Toolbar) findViewById(R.id.topBar);
-//        setSupportActionBar(toolbar);
-//
-//        title_change = (TextView) findViewById(R.id.title_change);
-//        title_change.setText("찜한 상품");
-//
-//        mTextListname = (TextView)findViewById(R.id.boxTitle);
-//        pickBoxList = (ListView)findViewById(R.id.pickBoxList);
-//        TitleValues = new ArrayList<>();
-//
-//        backBtn = (ImageView) findViewById(R.id.back_icon);
-//        backBtn.setOnClickListener(new View.OnClickListener() {
-//            @Override
-//            public void onClick(View v) {
-//                onBackPressed();
-//            }
-//        });
-//
-//        homeIcon = (ImageView) findViewById(R.id.homeIcon);
-//        testIcon = (ImageView) findViewById(R.id.testIcon);
-//        // searchIcon = (ImageView) findViewById(R.id.searchIcon);
-//        // loveIcon = (ImageView) findViewById(R.id.loveIcon);
-//        mypageIcon = (ImageView) findViewById(R.id.mypageIcon);
-//
-//        homeIcon.setOnClickListener(new View.OnClickListener() {
-//            @Override
-//            public void onClick(View v) {
-//                Intent intent = new Intent(getApplicationContext(), HomeActivity.class);
-//                startActivity(intent);
-//                finish();
-//            }
-//        });
-//
-//        testIcon.setOnClickListener(new View.OnClickListener() {
-//            @Override
-//            public void onClick(View v) {
-//                Intent intent = new Intent(getApplicationContext(), TestMainActivity.class);
-//                startActivity(intent);
-//                finish();
-//            }
-//        });
-//
-//        // searchIcon.setOnClickListener();
-//        // loveIcon.setOnClickListener();
-//
-//        mypageIcon.setOnClickListener(new View.OnClickListener() {
-//            @Override
-//            public void onClick(View v) {
-//                Intent intent = new Intent(getApplicationContext(), MyPageActivity.class);
-//                startActivity(intent);
-//                finish();
-//            }
-//        });
-//
-//
-//        // 스피너 - 폴더정렬
-//        spinnerPick = (Spinner) findViewById(R.id.spinnerPick);
-//
-//        ArrayAdapter<String> adapter = new ArrayAdapter<String>(
-//                this, android.R.layout.simple_spinner_item, PfItems);
-//        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
-//        spinnerPick.setAdapter(adapter);
-//
-//
-//
-//        spinnerPick.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
-//            @Override
-//            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
-//                //PfItemsBox.setText(PfItems[position]);
-//                ((TextView)parent.getChildAt(0)).setTextColor(Color.rgb(199, 131, 142));
-//                ((TextView)parent.getChildAt(0)).setTextAlignment(View.TEXT_ALIGNMENT_CENTER);
-//                switch(position) {
-//                    case 0 :
-//                        // ★ 임시 (기본)
-//                        break;
-//                    case 1 :
-//                        // ★ 임시 (최신순)
-//                        break;
-//                    case 2 :
-//                        // ★ 임시 (이름순)
-//                        break;
-//                }
-//            }
-//
-//            @Override
-//            public void onNothingSelected(AdapterView<?> parent) {
-//
-//            }
-//        });
-//
-//        // 찜폴더 관리
-//        TitleValues.add("기본 그룹");
-//
-//        for (int i = 0; i < TitleValues.size(); i++) {
-//            pickBoxLoading();
-//        }
-//
-//
-//        // ★ 리스트뷰와 버튼 조합일 시 주의사항
-//        // 1. 리스트뷰 포커스를 false로 해야 함
-//        // 2. 리스트뷰에 들어간 레이아웃에서 버튼들 xml에 clickable과 focusable은 false로 해야 함
-//        // 3. getView 메서드로 클릭하게 해줘야 됨.
-//
-///*
-//        // 어댑터 파일로 이동됨
-//        pickBoxList.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-//            @Override  // ★ 각각의 폴더 선택하면 해당 찜한 상품이 저장된 폴더로 이동 나중에 수정하기
-//            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-//
-//                switch (TitleValues.get(position)){
-//                    case "기본 그룹" :
-//                        Intent intent = new Intent(getApplicationContext(), PickFumeActivity.class);
-//                        startActivity(intent); // 임시 (찜한 향수들 목록이 있는 페이지로 이동)
-//                        break;
-//                }
-//            }
-//        }); */
-//
-//        // 새폴더 추가
-//        likelistAdapter = new LikelistAdapter(this, likelistData);
-//
-//        pickBoxNew = (ImageView) findViewById(R.id.pickBoxNew);
-//        pickBoxNew.setOnClickListener(new View.OnClickListener() {
-//            @Override
-//            public void onClick(View v) {
-//                AlertDialog.Builder alert = new AlertDialog.Builder(PickListActivity.this);
-//                alert.setTitle("그룹명을 입력하세요");
-//                alert.setMessage("최대 8자까지 가능합니다.");
-//                final EditText boxName = new EditText(PickListActivity.this);
-//                InputFilter[] FilterArray = new InputFilter[1];
-//                FilterArray[0] = new InputFilter.LengthFilter(8); //글자수 제한
-//                boxName.setFilters(FilterArray);
-//                alert.setView(boxName);
-//
-//                alert.setPositiveButton("확인", new DialogInterface.OnClickListener() {
-//                    public void onClick(DialogInterface dialog, int whichButton) {
-//                        // ★ 확인 버튼 클릭시 액션
-//                        listname = boxName.getText().toString();
-//
-//                        Intent intent = getIntent();
-//                        int uid = intent.getExtras().getInt("uid");
-//
-//                        TaskParams params = new TaskParams(serverURL, listname, uid);
-//                        InsertData insertData = new InsertData();
-//                        insertData.execute(params);
-//
-//                        //폴더 추가 후 인텐트 갱신하여 목록 가져오기
-////                        GetTaskParams params1 = new GetTaskParams(serverURL, uid);
-////                        GetData task = new GetData();
-////                        task.execute(params1);
-//                    }
-//                });
-//
-//                alert.setNegativeButton("취소", new DialogInterface.OnClickListener() {
-//                    public void onClick(DialogInterface dialog, int whichButton) {
-//                        // ★ 취소 버튼 클릭시 액션
-//                        dialog.cancel();
-//                    }
-//                });
-//                alert.show();
-//                //showPickBoxNew();
-//            }
-//        });
-//
-//    }
-//
-//
-//    // 메서드
-//
-//    void pickBoxLoading() { // 폴더 추가 메서드 - ★ 단 새로고침하면 기존 폴더들이 사라짐 (개선하기)
-//        ButtonListAdapter pickboxadapter = new ButtonListAdapter( this, TitleValues);
-//        pickBoxList.setAdapter(pickboxadapter);
-//
-//    }
-//
-//    void pickBoxClick() {
-//        pickBoxList.setOnItemClickListener(new AdapterView.OnItemClickListener() {
-//            @Override  // ★ 각각의 폴더 선택하면 해당 찜한 상품이 저장된 폴더로 이동 나중에 수정하기
-//            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
-//                //Intent intent = new Intent(getApplicationContext(), PickFumeActivity.class);
-//                // intent.putExtra("it_listData", TitleValues.get(position));
-//                // startActivity(intent); // 임시
-//                //Toast.makeText(getApplicationContext(), " 그룹 클릭", Toast.LENGTH_SHORT).show();
-//            }
-//        });
-//    }
-//
-//
-////    void showPickBoxNew() { // 새로 박스 만들기
-////        AlertDialog.Builder alert = new AlertDialog.Builder(this);
-////        alert.setTitle("그룹명을 입력하세요");
-////        alert.setMessage("최대 8자까지 가능합니다.");
-////        final EditText boxName = new EditText(this);
-////        InputFilter[] FilterArray = new InputFilter[1];
-////        FilterArray[0] = new InputFilter.LengthFilter(8); //글자수 제한
-////        boxName.setFilters(FilterArray);
-////        alert.setView(boxName);
-////
-////        alert.setPositiveButton("확인", new DialogInterface.OnClickListener() {
-////            public void onClick(DialogInterface dialog, int whichButton) {
-////                // ★ 확인 버튼 클릭시 액션
-////                listname = boxName.getText().toString();
-////
-////                Intent intent = getIntent();
-////                int uid = intent.getExtras().getInt("uid");
-////
-////                TaskParams params = new TaskParams(serverURL, listname, uid);
-////                InsertData insertData = new InsertData();
-////                insertData.execute(params);
-////
-////                //폴더 추가 후 인텐트 갱신하여 목록 가져오기
-////                GetTaskParams params1 = new GetTaskParams(serverURL, uid);
-////                GetData task = new GetData();
-////                task.execute(params1);
-////            }
-////        });
-////
-////        alert.setNegativeButton("취소", new DialogInterface.OnClickListener() {
-////            public void onClick(DialogInterface dialog, int whichButton) {
-////                // ★ 취소 버튼 클릭시 액션
-////                dialog.cancel();
-////            }
-////        });
-////        alert.show();
-////
-////    }
-//
-//    private static class TaskParams {
-//        int uid;
-//        String listname;
-//        String serverURL;
-//
-//        TaskParams(String serverURL, String listname, int uid) {
-//            this.serverURL = serverURL;
-//            this.listname = listname;
-//            this.uid = uid;
-//        }
-//    }
-//
-//    class InsertData extends AsyncTask<TaskParams, Void, String> {
-//        ProgressDialog progressDialog;
-//
-//        @Override
-//        protected void onPreExecute() {
-//            super.onPreExecute();
-//            progressDialog = ProgressDialog.show(PickListActivity.this,
-//                    "Please Wait", null, true, true);
-//        }
-//
-//        @Override
-//        protected void onPostExecute(String result) {
-//            super.onPostExecute(result);
-//            progressDialog.dismiss();
-//            Log.d(TAG, "POST response  - " + result);
-//
-//            TitleValues.add(listname);
-//            pickBoxLoading();
-//            Toast.makeText(getApplicationContext(), listname + "폴더가 추가되었습니다.", Toast.LENGTH_SHORT).show();
-//        }
-//
-//        @Override
-//        protected String doInBackground(TaskParams... params) {
-//
-//            String serverURL = params[0].serverURL;
-//            String listname = params[0].listname;
-//            int uid = params[0].uid;
-//
-//            String postParameters = "listname=" + listname + "&user_uid=" + uid;
-//
-//            try {
-//                URL url = new URL(serverURL);
-//                HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
-//
-//                httpURLConnection.setReadTimeout(5000);
-//                httpURLConnection.setConnectTimeout(5000);
-//                httpURLConnection.setRequestMethod("POST");
-//                httpURLConnection.connect();
-//
-//                OutputStream outputStream = httpURLConnection.getOutputStream();
-//                outputStream.write(postParameters.getBytes("UTF-8"));
-//                outputStream.flush();
-//                outputStream.close();
-//
-//                int responseStatusCode = httpURLConnection.getResponseCode();
-//                Log.d(TAG, "POST response code - " + responseStatusCode);
-//
-//                InputStream inputStream;
-//                if(responseStatusCode == HttpURLConnection.HTTP_OK) {
-//                    inputStream = httpURLConnection.getInputStream();
-//                }
-//                else{
-//                    inputStream = httpURLConnection.getErrorStream();
-//                }
-//
-//                InputStreamReader inputStreamReader = new InputStreamReader(inputStream, "UTF-8");
-//                BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
-//
-//                StringBuilder sb = new StringBuilder();
-//                String line = null;
-//
-//                while((line = bufferedReader.readLine()) != null){
-//                    sb.append(line);
-//                }
-//                bufferedReader.close();
-//                return sb.toString();
-//            } catch (Exception e) {
-//                Log.d(TAG, "InsertData: Error ", e);
-//                return new String("Error: " + e.getMessage());
-//            }
-//
-//        }
-//    }
-//
-////    private static class GetTaskParams {
-////        int uid;
-////        String serverURL;
-////
-////        GetTaskParams(String serverURL, int uid) {
-////            this.serverURL = serverURL;
-////            this.uid = uid;
-////        }
-////    }
-////
-////    private class GetData extends AsyncTask<GetTaskParams, Void, String>{
-////
-////        ProgressDialog progressDialog;
-////        String errorString = null;
-////
-////        @Override
-////        protected void onPreExecute() {
-////            super.onPreExecute();
-////
-////            progressDialog = ProgressDialog.show(PickListActivity.this,
-////                    "Please Wait", null, true, true);
-////        }
-////
-////        @Override
-////        protected void onPostExecute(String result) {
-////            super.onPostExecute(result);
-////            progressDialog.dismiss();
-////            Log.d(TAG, "response - " + result);
-////            if (result == null){
-////                Log.d(TAG, errorString);
-////            }
-////            else {
-////                Intent intent = getIntent();
-////                finish();
-////                startActivity(intent);
-////                mJsonString = result;
-////                showResult();
-////            }
-////        }
-////
-////
-////        @Override
-////        protected String doInBackground(GetTaskParams... params) {
-////            String serverURL = params[0].serverURL;
-////            int uid = params[0].uid;
-////
-////            String postParameters = "user_uid=" + uid;
-////
-////            try {
-////                URL url = new URL(serverURL);
-////                HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
-////
-////                httpURLConnection.setReadTimeout(5000);
-////                httpURLConnection.setConnectTimeout(5000);
-////                httpURLConnection.setRequestMethod("POST");
-////                httpURLConnection.setDoInput(true);
-////                httpURLConnection.connect();
-////
-////                OutputStream outputStream = httpURLConnection.getOutputStream();
-////                outputStream.write(postParameters.getBytes("UTF-8"));
-////                outputStream.flush();
-////                outputStream.close();
-////
-////                int responseStatusCode = httpURLConnection.getResponseCode();
-////                Log.d(TAG, "response code - " + responseStatusCode);
-////
-////                InputStream inputStream;
-////                if(responseStatusCode == HttpURLConnection.HTTP_OK) {
-////                    inputStream = httpURLConnection.getInputStream();
-////                }
-////                else{
-////                    inputStream = httpURLConnection.getErrorStream();
-////                }
-////
-////                InputStreamReader inputStreamReader = new InputStreamReader(inputStream, "UTF-8");
-////                BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
-////
-////                StringBuilder sb = new StringBuilder();
-////                String line;
-////
-////                while((line = bufferedReader.readLine()) != null){
-////                    sb.append(line);
-////                }
-////                bufferedReader.close();
-////                return sb.toString().trim();
-////
-////            } catch (Exception e) {
-////
-////                Log.d(TAG, "InsertData: Error ", e);
-////                errorString = e.toString();
-////
-////                return null;
-////            }
-////        }
-////    }
-////
-////    private void showResult(){
-////        String TAG_JSON="dailyfume";
-////        String TAG_UID = "user_uid";
-////
-////        try {
-////            JSONObject jsonObject = new JSONObject(mJsonString);
-////            JSONArray jsonArray = jsonObject.getJSONArray(TAG_JSON);
-////
-////            for(int i=0;i<jsonArray.length();i++){
-////                JSONObject item = jsonArray.getJSONObject(i);
-////
-////                int uid = item.getInt(TAG_UID);
-////
-////                LikelistData listData = new LikelistData();
-////
-////                listData.setUid(uid);
-////
-////                likelistData.add(listData);
-////                pickBoxList.setAdapter(likelistAdapter);
-////            }
-////
-////        } catch (JSONException e) {
-////            Log.d(TAG, "showResult : ", e);
-////        }
-////
-////    }
-//
-//
-//
-//}
\ No newline at end of file
+    private static String TAG = "likelistphp";
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.activity_pick_list);
+
+        Toolbar toolbar = (Toolbar) findViewById(R.id.topBar);
+        setSupportActionBar(toolbar);
+
+        title_change = (TextView) findViewById(R.id.title_change);
+        title_change.setText("찜한 상품");
+
+        backBtn = (ImageView) findViewById(R.id.back_icon);
+        backBtn.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                onBackPressed();
+            }
+        });
+
+        homeIcon = (ImageView) findViewById(R.id.homeIcon);
+        testIcon = (ImageView) findViewById(R.id.testIcon);
+        // searchIcon = (ImageView) findViewById(R.id.searchIcon);
+        // loveIcon = (ImageView) findViewById(R.id.loveIcon);
+        mypageIcon = (ImageView) findViewById(R.id.mypageIcon);
+
+        homeIcon.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Intent intent = new Intent(getApplicationContext(), HomeActivity.class);
+                startActivity(intent);
+                finish();
+            }
+        });
+
+        testIcon.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Intent intent = new Intent(getApplicationContext(), TestMainActivity.class);
+                startActivity(intent);
+                finish();
+            }
+        });
+
+        // searchIcon.setOnClickListener();
+        // loveIcon.setOnClickListener();
+
+        mypageIcon.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                Intent intent = new Intent(getApplicationContext(), MyPageActivity.class);
+                startActivity(intent);
+                finish();
+            }
+        });
+
+
+        // 스피너 - 폴더정렬
+        spinnerPick = (Spinner) findViewById(R.id.spinnerPick);
+
+        ArrayAdapter<String> adapter = new ArrayAdapter<String>(
+                this, android.R.layout.simple_spinner_item, PfItems);
+        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);
+        spinnerPick.setAdapter(adapter);
+
+
+
+        spinnerPick.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {
+            @Override
+            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {
+                //PfItemsBox.setText(PfItems[position]);
+                ((TextView)parent.getChildAt(0)).setTextColor(Color.rgb(199, 131, 142));
+                ((TextView)parent.getChildAt(0)).setTextAlignment(View.TEXT_ALIGNMENT_CENTER);
+                switch(position) {
+                    case 0 :
+                        // ★ 임시 (기본)
+                        break;
+                    case 1 :
+                        // ★ 임시 (최신순)
+                        break;
+                    case 2 :
+                        // ★ 임시 (이름순)
+                        break;
+                }
+            }
+
+            @Override
+            public void onNothingSelected(AdapterView<?> parent) {
+
+            }
+        });
+
+        // 찜폴더 관리
+        pickBoxList = (ListView) findViewById(R.id.pickBoxList);
+        TitleValues.add("기본 그룹");
+
+        for (int i = 0; i < TitleValues.size(); i++) {
+            pickBoxLoading();
+        }
+
+
+        // ★ 리스트뷰와 버튼 조합일 시 주의사항
+        // 1. 리스트뷰 포커스를 false로 해야 함
+        // 2. 리스트뷰에 들어간 레이아웃에서 버튼들 xml에 clickable과 focusable은 false로 해야 함
+        // 3. getView 메서드로 클릭하게 해줘야 됨.
+
+/*
+        // 어댑터 파일로 이동됨
+        pickBoxList.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override  // ★ 각각의 폴더 선택하면 해당 찜한 상품이 저장된 폴더로 이동 나중에 수정하기
+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+
+                switch (TitleValues.get(position)){
+                    case "기본 그룹" :
+                        Intent intent = new Intent(getApplicationContext(), PickFumeActivity.class);
+                        startActivity(intent); // 임시 (찜한 향수들 목록이 있는 페이지로 이동)
+                        break;
+                }
+            }
+        }); */
+
+        // 새폴더 추가
+        pickBoxNew = (ImageView) findViewById(R.id.pickBoxNew);
+        pickBoxNew.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                showPickBoxNew();
+            }
+        });
+
+    }
+
+
+    // 메서드
+
+    void pickBoxLoading() { // 폴더 추가 메서드 - ★ 단 새로고침하면 기존 폴더들이 사라짐 (개선하기)
+        ButtonListAdapter pickboxadapter = new ButtonListAdapter( this, new ArrayList<GroupData>());
+        pickBoxList.setAdapter(pickboxadapter);
+
+    }
+
+    void pickBoxClick() {
+        pickBoxList.setOnItemClickListener(new AdapterView.OnItemClickListener() {
+            @Override  // ★ 각각의 폴더 선택하면 해당 찜한 상품이 저장된 폴더로 이동 나중에 수정하기
+            public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
+                //Intent intent = new Intent(getApplicationContext(), PickFumeActivity.class);
+                // intent.putExtra("it_listData", TitleValues.get(position));
+                // startActivity(intent); // 임시
+                //Toast.makeText(getApplicationContext(), " 그룹 클릭", Toast.LENGTH_SHORT).show();
+            }
+        });
+    }
+
+
+    void showPickBoxNew() { // 새로 박스 만들기
+        AlertDialog.Builder alert = new AlertDialog.Builder(this);
+        alert.setTitle("그룹명을 입력하세요");
+        alert.setMessage("최대 8자까지 가능합니다.");
+        final EditText boxName = new EditText(this);
+        InputFilter[] FilterArray = new InputFilter[1];
+        FilterArray[0] = new InputFilter.LengthFilter(8); //글자수 제한
+        boxName.setFilters(FilterArray);
+        alert.setView(boxName);
+
+
+        alert.setPositiveButton("확인", new DialogInterface.OnClickListener() {
+            public void onClick(DialogInterface dialog, int whichButton) {
+                // ★ 확인 버튼 클릭시 액션
+                listname = boxName.getText().toString();
+
+                Intent intent = getIntent();
+                int uid = intent.getExtras().getInt("uid");
+
+                TaskParams params = new TaskParams(serverURL, listname, uid);
+                InsertData insertData = new InsertData();
+                insertData.execute(params);
+            }
+        });
+
+        alert.setNegativeButton("취소", new DialogInterface.OnClickListener() {
+            public void onClick(DialogInterface dialog, int whichButton) {
+                // ★ 취소 버튼 클릭시 액션
+                dialog.cancel();
+            }
+        });
+        alert.show();
+
+    }
+
+    private static class TaskParams {
+        int uid;
+        String listname;
+        String serverURL;
+
+        TaskParams(String serverURL, String listname, int uid) {
+            this.serverURL = serverURL;
+            this.listname = listname;
+            this.uid = uid;
+        }
+    }
+
+    class InsertData extends AsyncTask<TaskParams, Void, String> {
+        ProgressDialog progressDialog;
+
+        @Override
+        protected void onPreExecute() {
+            super.onPreExecute();
+            progressDialog = ProgressDialog.show(PickListActivity.this,
+                    "Please Wait", null, true, true);
+        }
+
+        @Override
+        protected void onPostExecute(String result) {
+            super.onPostExecute(result);
+            progressDialog.dismiss();
+            Log.d(TAG, "POST response  - " + result);
+
+            TitleValues.add(listname);
+            pickBoxLoading();
+            Toast.makeText(getApplicationContext(), listname + "폴더가 추가되었습니다.", Toast.LENGTH_SHORT).show();
+        }
+
+        @Override
+        protected String doInBackground(TaskParams... params) {
+
+            String serverURL = params[0].serverURL;
+            String listname = params[0].listname;
+            int uid = params[0].uid;
+
+            String postParameters = "listname=" + listname + "&user_uid=" + uid;
+
+            try {
+                URL url = new URL(serverURL);
+                HttpURLConnection httpURLConnection = (HttpURLConnection) url.openConnection();
+
+                httpURLConnection.setReadTimeout(5000);
+                httpURLConnection.setConnectTimeout(5000);
+                httpURLConnection.setRequestMethod("POST");
+                httpURLConnection.connect();
+
+                OutputStream outputStream = httpURLConnection.getOutputStream();
+                outputStream.write(postParameters.getBytes("UTF-8"));
+                outputStream.flush();
+                outputStream.close();
+
+                int responseStatusCode = httpURLConnection.getResponseCode();
+                Log.d(TAG, "POST response code - " + responseStatusCode);
+
+                InputStream inputStream;
+                if(responseStatusCode == HttpURLConnection.HTTP_OK) {
+                    inputStream = httpURLConnection.getInputStream();
+                }
+                else{
+                    inputStream = httpURLConnection.getErrorStream();
+                }
+
+                InputStreamReader inputStreamReader = new InputStreamReader(inputStream, "UTF-8");
+                BufferedReader bufferedReader = new BufferedReader(inputStreamReader);
+
+                StringBuilder sb = new StringBuilder();
+                String line = null;
+
+                while((line = bufferedReader.readLine()) != null){
+                    sb.append(line);
+                }
+                bufferedReader.close();
+                return sb.toString();
+            } catch (Exception e) {
+                Log.d(TAG, "InsertData: Error ", e);
+                return new String("Error: " + e.getMessage());
+            }
+
+        }
+    }
+
+}
